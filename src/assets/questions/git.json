[
  { "id":"git-b-001","topic":"git","difficulty":"basic","prompt":"What does 'git init' do?","options":["Creates a new Git repository","Clones a repository","Stages files","Resets HEAD"],"answerIndex":0,"explanation":"Initializes a new, empty repository in the current directory." },
  { "id":"git-b-002","topic":"git","difficulty":"basic","prompt":"Which command clones a remote repository?","options":["git pull","git copy","git clone","git fetch"],"answerIndex":2,"explanation":"git clone downloads a remote repo and sets up remotes." },
  { "id":"git-b-003","topic":"git","difficulty":"basic","prompt":"Where does Git store metadata for a repo?","options":[".metadata/","/var/git","HEAD",".git/"],"answerIndex":3,"explanation":"All repository metadata lives in the .git directory." },
  { "id":"git-b-004","topic":"git","difficulty":"basic","prompt":"What does 'git status' show?","options":["Commit history","Staging area and working tree changes","Remote tags","Branch graph only"],"answerIndex":1,"explanation":"Shows staged/unstaged changes and untracked files." },
  { "id":"git-b-005","topic":"git","difficulty":"basic","prompt":"How do you stage a single file for commit?","options":["git add .","git stage all","git stage","git add <file>"],"answerIndex":3,"explanation":"Use git add <file> to add specific changes to the index." },
  { "id":"git-b-006","topic":"git","difficulty":"basic","prompt":"Which command creates a new commit with staged changes?","options":["git push","git commit","git save","git write"],"answerIndex":1,"explanation":"git commit records the snapshot from the index." },
  { "id":"git-b-007","topic":"git","difficulty":"basic","prompt":"How do you see the commit history?","options":["git history","git log","git reflog","git show"],"answerIndex":1,"explanation":"git log prints commit history." },
  { "id":"git-b-008","topic":"git","difficulty":"basic","prompt":"What does 'git branch' do without arguments?","options":["Creates branch","Deletes branch","Lists branches","Renames branch"],"answerIndex":2,"explanation":"Lists local branches and shows the current one." },
  { "id":"git-b-009","topic":"git","difficulty":"basic","prompt":"How to create and switch to a new branch?","options":["git switch -c <name>","git new <name>","git branch <name>; git go <name>","git checkout <remote>"],"answerIndex":0,"explanation":"git switch -c (or git checkout -b) creates and checks out a branch." },
  { "id":"git-b-010","topic":"git","difficulty":"basic","prompt":"What does 'git checkout -- <file>' do?","options":["Deletes file","Stages file","Discards local changes in file","Commits file"],"answerIndex":2,"explanation":"Replaces the file with the version from HEAD (dangerous operation)." },

  { "id":"git-b-011","topic":"git","difficulty":"basic","prompt":"How do you compare working tree changes to last commit?","options":["git show","git diff","git blame","git cat"],"answerIndex":1,"explanation":"git diff shows line-by-line differences." },
  { "id":"git-b-012","topic":"git","difficulty":"basic","prompt":"What does 'git rm --cached <file>' do?","options":["Deletes from disk","Untracks file but keeps it on disk","Stages file","Resets HEAD"],"answerIndex":1,"explanation":"Removes file from index but preserves it locally." },
  { "id":"git-b-013","topic":"git","difficulty":"basic","prompt":"Purpose of .gitignore?","options":["Store credentials","Ignore file patterns from being tracked","List authors","Define branches"],"answerIndex":1,"explanation":"Specifies files Git should not track." },
  { "id":"git-b-014","topic":"git","difficulty":"basic","prompt":"Which command sets your username globally?","options":["git user set","git config --global user.name","git set user","git config user"],"answerIndex":1,"explanation":"git config stores user identity in config." },
  { "id":"git-b-015","topic":"git","difficulty":"basic","prompt":"What does 'origin' normally refer to?","options":["Your local branch","Your fork","Default name of the remote you cloned from","The main branch"],"answerIndex":2,"explanation":"'origin' is the default remote created by git clone." },
  { "id":"git-b-016","topic":"git","difficulty":"basic","prompt":"Difference between 'git fetch' and 'git pull'?","options":["Pull only downloads","Fetch downloads and merges","Fetch only downloads, pull downloads and merges","They are identical"],"answerIndex":2,"explanation":"Fetch updates remote-tracking refs; pull = fetch + merge/rebase." },
  { "id":"git-b-017","topic":"git","difficulty":"basic","prompt":"How to push a new local branch to origin?","options":["git push","git push origin","git push origin <branch>","git upload <branch>"],"answerIndex":2,"explanation":"Specify remote and branch on first push." },
  { "id":"git-b-018","topic":"git","difficulty":"basic","prompt":"What does 'git stash' do?","options":["Deletes changes","Temporarily saves uncommitted changes","Commits changes","Creates tag"],"answerIndex":1,"explanation":"Stash stores WIP so you can switch tasks safely." },
  { "id":"git-b-019","topic":"git","difficulty":"basic","prompt":"How to apply the most recent stash?","options":["git stash pop","git stash get","git stash apply","git stash merge"],"answerIndex":0,"explanation":"pop applies and removes the latest stash (apply keeps it)." },
  { "id":"git-b-020","topic":"git","difficulty":"basic","prompt":"What does 'git revert <commit>' do?","options":["Deletes commit","Resets HEAD","Creates a new commit that undoes changes","Removes files"],"answerIndex":2,"explanation":"Revert is safe for shared history (no rewrite)." },

  { "id":"git-b-021","topic":"git","difficulty":"basic","prompt":"How to see which lines were changed and by whom?","options":["git show","git blame <file>","git author","git who"],"answerIndex":1,"explanation":"git blame annotates each line with commit/author." },
  { "id":"git-b-022","topic":"git","difficulty":"basic","prompt":"What does 'git tag' typically mark?","options":["Branches","Issues","Specific commits (often releases)","Remotes"],"answerIndex":2,"explanation":"Tags point at commits, commonly used for versioning." },
  { "id":"git-b-023","topic":"git","difficulty":"basic","prompt":"How to delete a local branch?","options":["git branch -d <name>","git delete <name>","git rm <name>","git branch --remove <name>"],"answerIndex":0,"explanation":"-d deletes the branch if merged; -D forces deletion." },
  { "id":"git-b-024","topic":"git","difficulty":"basic","prompt":"How do you see remote URLs?","options":["git remotes","git remote -v","git remote show","git url"],"answerIndex":1,"explanation":"-v prints remotes and their fetch/push URLs." },
  { "id":"git-b-025","topic":"git","difficulty":"basic","prompt":"What does HEAD represent?","options":["Remote head","Current commit your working tree is based on","First commit","Tag pointer only"],"answerIndex":1,"explanation":"HEAD points to the current checked-out commit (via a branch ref)." },
  { "id":"git-b-026","topic":"git","difficulty":"basic","prompt":"How to undo the last commit but keep changes staged?","options":["git reset --hard HEAD~1","git revert HEAD","git reset --soft HEAD~1","git restore --staged ."],"answerIndex":2,"explanation":"--soft moves HEAD back and leaves index intact." },
  { "id":"git-b-027","topic":"git","difficulty":"basic","prompt":"How to discard all local changes (dangerous)?","options":["git clean -fd","git reset --hard","Both of the above (plus removing untracked)","git revert"],"answerIndex":2,"explanation":"reset --hard discards tracked changes; clean -fd removes untracked." },
  { "id":"git-b-028","topic":"git","difficulty":"basic","prompt":"Which file holds repo-level settings?","options":[".git/config","~/.gitconfig",".gitignore","config.yml"],"answerIndex":0,"explanation":"Local repo config is in .git/config; global in ~/.gitconfig." },
  { "id":"git-b-029","topic":"git","difficulty":"basic","prompt":"What does 'git commit -m' do?","options":["Commits with a message","Merges a message","Modifies last commit message","Makes a merge commit"],"answerIndex":0,"explanation":"-m lets you specify the commit message inline." },
  { "id":"git-b-030","topic":"git","difficulty":"basic","prompt":"How to rename a branch youâ€™re on?","options":["git rename <new>","git branch -m <new>","git switch -r <new>","git move <new>"],"answerIndex":1,"explanation":"git branch -m renames the current (or specified) branch." },

  { "id":"git-i-031","topic":"git","difficulty":"intermediate","prompt":"What does 'git rebase' do?","options":["Merges histories with a merge commit","Rewrites commits on top of a new base","Deletes history","Tags a base commit"],"answerIndex":1,"explanation":"It reapplies commits onto another base to create linear history." },
  { "id":"git-i-032","topic":"git","difficulty":"intermediate","prompt":"Interactive rebase command is:","options":["git rebase -i","git rebase --interactive","Both A and B","git rebase --edit"],"answerIndex":2,"explanation":"-i opens an editor to reorder/squash/edit commits." },
  { "id":"git-i-033","topic":"git","difficulty":"intermediate","prompt":"What is a fast-forward merge?","options":["A merge that always creates a merge commit","Moving branch pointer without a new commit","A forced merge","A rebase"],"answerIndex":1,"explanation":"If no divergent history, Git can simply move the pointer." },
  { "id":"git-i-034","topic":"git","difficulty":"intermediate","prompt":"How to abort a merge in progress?","options":["git merge --abort","git reset --merge","Both can work","git revert --abort"],"answerIndex":2,"explanation":"git merge --abort (or suitable reset) aborts the merge attempt." },
  { "id":"git-i-035","topic":"git","difficulty":"intermediate","prompt":"What is a detached HEAD?","options":["HEAD points to a tag/commit, not a branch","HEAD is missing","HEAD points to remote only","HEAD is corrupted"],"answerIndex":0,"explanation":"Occurs when you checkout a commit or tag directly." },
  { "id":"git-i-036","topic":"git","difficulty":"intermediate","prompt":"How to change the last commit message (no new commit)?","options":["git commit --amend","git reword HEAD~1","git message --edit","git fixup"],"answerIndex":0,"explanation":"--amend lets you replace the last commit metadata/content." },
  { "id":"git-i-037","topic":"git","difficulty":"intermediate","prompt":"What does 'git cherry-pick <commit>' do?","options":["Deletes a commit","Applies changes from a specific commit to current branch","Merges two branches","Resets to a commit"],"answerIndex":1,"explanation":"It replays that commit on your current HEAD." },
  { "id":"git-i-038","topic":"git","difficulty":"intermediate","prompt":"How to find the commit that introduced a bug?","options":["git blame","git bisect","git revert","git annotate"],"answerIndex":1,"explanation":"git bisect does a binary search through history." },
  { "id":"git-i-039","topic":"git","difficulty":"intermediate","prompt":"Difference between 'git reset --mixed' and '--hard'?","options":["Mixed resets index; hard resets index and working tree","They are identical","Hard resets index only","Mixed does nothing"],"answerIndex":0,"explanation":"--mixed unstages changes; --hard also discards working files." },
  { "id":"git-i-040","topic":"git","difficulty":"intermediate","prompt":"How to stage only part of a file?","options":["git add --patch","git add --partial","git stage -s","git split"],"answerIndex":0,"explanation":"--patch interactively selects hunks to stage." },

  { "id":"git-i-041","topic":"git","difficulty":"intermediate","prompt":"What does 'git reflog' track?","options":["Only remote branches","Movements of HEAD and refs","Untracked files","Git LFS objects"],"answerIndex":1,"explanation":"Reflog helps recover commits/branches by logging ref updates." },
  { "id":"git-i-042","topic":"git","difficulty":"intermediate","prompt":"How to undo a merge commit safely in shared history?","options":["git reset --hard","git revert -m 1 <merge-commit>","git rebase -i","git gc"],"answerIndex":1,"explanation":"Revert with -m specifies the parent to keep when reverting a merge." },
  { "id":"git-i-043","topic":"git","difficulty":"intermediate","prompt":"What is a tracking branch?","options":["A branch that tracks file changes","A local branch linked to a remote branch","A branch that tracks tags","A detached ref"],"answerIndex":1,"explanation":"It knows its upstream remote branch for pull/push." },
  { "id":"git-i-044","topic":"git","difficulty":"intermediate","prompt":"How to set upstream for current branch?","options":["git track origin","git push --set-upstream origin <branch>","git branch --upstream <branch>","git remote set-url"],"answerIndex":1,"explanation":"First push with --set-upstream links the local branch to remote." },
  { "id":"git-i-045","topic":"git","difficulty":"intermediate","prompt":"What does 'git restore --staged <file>' do?","options":["Removes file from disk","Unstages file (keeps working changes)","Discards working changes","Restores remote state"],"answerIndex":1,"explanation":"It moves the file from index back to working tree." },
  { "id":"git-i-046","topic":"git","difficulty":"intermediate","prompt":"How to list files changed in a commit?","options":["git ls-files","git diff-tree --no-commit-id --name-only -r <commit>","git files <commit>","git changes"],"answerIndex":1,"explanation":"diff-tree can show changed paths for a commit." },
  { "id":"git-i-047","topic":"git","difficulty":"intermediate","prompt":"What is 'git submodule'?","options":["A branch group","A repository embedded as a directory in another repo","A stash entry","A reflog entry"],"answerIndex":1,"explanation":"Submodules link external repos at specific commits." },
  { "id":"git-i-048","topic":"git","difficulty":"intermediate","prompt":"How to squash last 3 commits into one (keeping message editor)?","options":["git rebase -i HEAD~3","git merge --squash HEAD~3","git squash 3","git commit --squash"],"answerIndex":0,"explanation":"Interactive rebase lets you squash/reword commits." },
  { "id":"git-i-049","topic":"git","difficulty":"intermediate","prompt":"How to sign commits with GPG?","options":["git commit -S","git commit --sign","git commit --gpg","git commit -K"],"answerIndex":0,"explanation":"-S enables GPG signing (with proper config)." },
  { "id":"git-i-050","topic":"git","difficulty":"intermediate","prompt":"Which command shows a one-line condensed history graph?","options":["git log --oneline --graph --decorate --all","git history graph","git graph","git reflog --graph"],"answerIndex":0,"explanation":"That combo is a common alias to visualize branches." },

  { "id":"git-a-051","topic":"git","difficulty":"advanced","prompt":"Safest way to rewrite many commit messages in shared history?","options":["git reset --hard","git filter-repo (or filter-branch) with coordination","git push -f without notice","git stash -m"],"answerIndex":1,"explanation":"History rewrite affects collaborators; use filter-repo and coordinate." },
  { "id":"git-a-052","topic":"git","difficulty":"advanced","prompt":"How to remove accidentally committed secrets from history?","options":["git revert","git filter-repo to purge blobs/paths","git stash","git rm only"],"answerIndex":1,"explanation":"filter-repo/filter-branch removes secrets from entire history; rotate keys." },
  { "id":"git-a-053","topic":"git","difficulty":"advanced","prompt":"What is the risk of 'git push --force' on shared branches?","options":["None","It can overwrite othersâ€™ history","It deletes remotes","It only adds commits"],"answerIndex":1,"explanation":"Force push can clobber remote history; prefer --force-with-lease." },
  { "id":"git-a-054","topic":"git","difficulty":"advanced","prompt":"Benefit of 'git push --force-with-lease' over '--force'?","options":["Faster push","Prevents overwriting if remote changed","Pushes tags only","No difference"],"answerIndex":1,"explanation":"Lease checks remote ref hasnâ€™t advanced before rewriting." },
  { "id":"git-a-055","topic":"git","difficulty":"advanced","prompt":"How to split a repo directory into a new repository preserving history?","options":["git subtree split","git split-dir","git copy-history","git export"],"answerIndex":0,"explanation":"subtree split can extract a subdir with its history." },
  { "id":"git-a-056","topic":"git","difficulty":"advanced","prompt":"Difference: 'git subtree' vs 'git submodule'?","options":["Subtree embeds code and history; submodule references external repo commit","They are identical","Submodule merges history automatically","Subtree requires network always"],"answerIndex":0,"explanation":"Subtree copies files/history; submodule is a pointer to another repo." },
  { "id":"git-a-057","topic":"git","difficulty":"advanced","prompt":"Strategy to keep long-lived branch up to date without many merge commits:","options":["Continuous merges","Rebase regularly on target branch","No sync","Force push randomly"],"answerIndex":1,"explanation":"Rebase maintains linear history and reduces merge noise." },
  { "id":"git-a-058","topic":"git","difficulty":"advanced","prompt":"How to bisect a flaky test failure quickly on CI cached artifacts?","options":["git clone fresh every time","Use 'git bisect' with scripted test runner","Manual eyeballing","Use revert"],"answerIndex":1,"explanation":"Automate bisect runs with a test command returning 0/1." },
  { "id":"git-a-059","topic":"git","difficulty":"advanced","prompt":"How to track file renames/moves across history when blaming?","options":["git blame --follow <file>","git track rename <file>","git log --move","git show --rename"],"answerIndex":0,"explanation":"--follow walks history across renames (one file path)." },
  { "id":"git-a-060","topic":"git","difficulty":"advanced","prompt":"How to enforce signed commits on main?","options":["Team agreement","Server-side hooks or platform protection rules","README note","Tags only"],"answerIndex":1,"explanation":"Hooks or Git hosting rules can require GPG/SSH-signed commits." },

  { "id":"git-a-061","topic":"git","difficulty":"advanced","prompt":"Recover from a force-push that rewrote main unintentionally:","options":["git clean -fd","Use 'git reflog' on remote mirror/locals to find old tip and push it back","Cannot recover","Tag HEAD"],"answerIndex":1,"explanation":"Reflogs (local/mirrors) retain old refs for recovery." },
  { "id":"git-a-062","topic":"git","difficulty":"advanced","prompt":"When is 'git revert' preferred over 'git reset'?","options":["On private branches","On shared branches to avoid rewriting history","Never","Always"],"answerIndex":1,"explanation":"Revert creates a new commit to undo; reset rewrites history." },
  { "id":"git-a-063","topic":"git","difficulty":"advanced","prompt":"How to keep a fork synchronized with upstream main?","options":["Only push to origin","Add 'upstream' remote and rebase/merge regularly","Edit .git/config by hand","Use tags"],"answerIndex":1,"explanation":"Fetch upstream and rebase/merge into your fork's branches." },
  { "id":"git-a-064","topic":"git","difficulty":"advanced","prompt":"Large binary files best practice:","options":["Commit directly","Use Git LFS","Compress into tar.gz","Avoid versioning"],"answerIndex":1,"explanation":"Git LFS stores large files efficiently outside normal objects." },
  { "id":"git-a-065","topic":"git","difficulty":"advanced","prompt":"Command to show commits that are in A but not in B:","options":["git log B..A","git diff A..B","git show A..B","git range A..B"],"answerIndex":0,"explanation":"B..A shows commits reachable from A and not from B." },
  { "id":"git-a-066","topic":"git","difficulty":"advanced","prompt":"How to prevent accidental pushes to main from local?","options":["Never setup remote","Pre-push hook or 'receive.denyCurrentBranch' on server","Remove main","Use SVN"],"answerIndex":1,"explanation":"Client hooks or server config can block pushes to protected branches." },
  { "id":"git-a-067","topic":"git","difficulty":"advanced","prompt":"Minimize merge conflicts in monorepos:","options":["Big-bang merges","Frequent small merges/rebases + feature flags","Force push always","Single developer only"],"answerIndex":1,"explanation":"Short-lived branches and frequent integration reduce conflicts." },
  { "id":"git-a-068","topic":"git","difficulty":"advanced","prompt":"How to sign tags cryptographically?","options":["git tag -s <tag>","git tag --secure <tag>","git tag -S <tag>","git tag --gpg <tag>"],"answerIndex":0,"explanation":"-s creates a GPG-signed tag (requires key config)." },
  { "id":"git-a-069","topic":"git","difficulty":"advanced","prompt":"Preferred approach to remove a huge file added in a single commit yesterday on shared branch:","options":["git reset --hard","git revert that commit and add .gitignore rule","git gc only","Ignore it"],"answerIndex":1,"explanation":"Revert keeps history safe and prevents future tracking." },
  { "id":"git-a-070","topic":"git","difficulty":"advanced","prompt":"How to keep a linear history on a busy team repo?","options":["Allow merges only","Require PRs to rebase/squash before merge","No code reviews","Tag every commit"],"answerIndex":1,"explanation":"Squash/rebase merges maintain a linear, cleaner history." }
]
